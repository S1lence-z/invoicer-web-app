using Application.Mappers;
using Domain.Models;
using Application.DTOs;
using Shared.Enums;
using Application.ServiceInterfaces;
using Application.RepositoryInterfaces;
using Application.ExternalServiceInterfaces;
using Application.DTOs.Pdf;

namespace Backend.Services
{
	public class InvoiceService(IInvoiceRepository invoiceRepository, IEntityRepository entityRepository, IInvoiceItemRepository invoiceItemRepository, IEntityInvoiceNumberingStateService entityInvoiceNumberingStateService, IInvoicePdfGenerator invoicePdfGenerator) : IInvoiceService
	{
		public async Task<InvoiceDto> GetByIdAsync(int id)
		{
			Invoice invoice = await invoiceRepository.GetByIdAsync(id, true);
			return InvoiceMapper.MapToDto(invoice);
		}

		public async Task<IList<InvoiceDto>> GetAllAsync()
		{
			IEnumerable<Invoice> allInvoices = await invoiceRepository.GetAllAsync();
			return allInvoices.Select(InvoiceMapper.MapToDto).ToList();
		}

		public async Task<InvoiceDto> CreateAsync(InvoiceDto newInvoice)
		{
			Entity seller = await entityRepository.GetByIdAsync(newInvoice.SellerId, true);
			Entity buyer = await entityRepository.GetByIdAsync(newInvoice.BuyerId, true);

			if (seller.Id == buyer.Id)
				throw new ArgumentException($"Seller and buyer cannot be the same entity");

			// Assign the seller numbering scheme as the default for the new invoice
			newInvoice.NumberingSchemeId = seller.CurrentNumberingSchemeId;

			// Generate invoice number
			string autoGeneratedInvoiceNumber = await entityInvoiceNumberingStateService.GetNextInvoiceNumberAsync(seller.Id, DateTime.Now);
			if (string.IsNullOrEmpty(autoGeneratedInvoiceNumber))
				throw new ArgumentException($"Failed to generate invoice number for seller with id {seller.Id}");

			// Set the generated invoice number to the new invoice
			newInvoice.InvoiceNumber = newInvoice.IsCustomInvoiceNumber
				? newInvoice.InvoiceNumber
				: autoGeneratedInvoiceNumber;

			newInvoice.Seller = EntityMapper.MapToDto(seller);
			newInvoice.Buyer = EntityMapper.MapToDto(buyer);

			Invoice invoice = InvoiceMapper.MapToDomain(newInvoice);
			await invoiceRepository.CreateAsync(invoice);
			await entityInvoiceNumberingStateService.UpdateForNextAsync(seller.Id, EntityInvoiceNumberingStateUpdateStatus.Creating, newInvoice.IsCustomInvoiceNumber, invoice);
			await invoiceRepository.SaveChangesAsync();

			// TODO: how does this know the id?
			Invoice createdInvoice = await invoiceRepository.GetByIdAsync(invoice.Id, true);
			return InvoiceMapper.MapToDto(createdInvoice);
		}

		public async Task<InvoiceDto> UpdateAsync(int id, InvoiceDto updatedInvoice)
		{
			Invoice existingInvoice = await invoiceRepository.GetByIdAsync(id, false);
			Entity seller = await entityRepository.GetByIdAsync(updatedInvoice.SellerId, true);
			Entity buyer = await entityRepository.GetByIdAsync(updatedInvoice.BuyerId, true);

			if (seller.Id == buyer.Id)
				throw new ArgumentException($"Seller and buyer cannot be the same entity");

			existingInvoice.IssueDate = updatedInvoice.IssueDate;
			existingInvoice.DueDate = updatedInvoice.DueDate;
			existingInvoice.Currency = updatedInvoice.Currency;
			existingInvoice.PaymentMethod = updatedInvoice.PaymentMethod;
			existingInvoice.VatDate = updatedInvoice.VatDate;
			existingInvoice.Status = updatedInvoice.Status;
			existingInvoice.DeliveryMethod = updatedInvoice.DeliveryMethod;
			existingInvoice.BuyerId = updatedInvoice.BuyerId;
			await UpdateInvoiceItemsAsync(existingInvoice, updatedInvoice.Items);

			if (existingInvoice.InvoiceNumber != updatedInvoice.InvoiceNumber)
			{
				existingInvoice.InvoiceNumber = updatedInvoice.InvoiceNumber;
				await entityInvoiceNumberingStateService.UpdateForNextAsync(existingInvoice.SellerId, EntityInvoiceNumberingStateUpdateStatus.Updating, updatedInvoice.IsCustomInvoiceNumber, existingInvoice);
			}

			invoiceRepository.Update(existingInvoice);
			await invoiceRepository.SaveChangesAsync();

			Invoice updatedInvoiceEntity = await invoiceRepository.GetByIdAsync(id, true);
			return InvoiceMapper.MapToDto(updatedInvoiceEntity);
		}

		public async Task<bool> DeleteAsync(int id)
		{
			Invoice existingInvoice = await invoiceRepository.GetByIdAsync(id, false);
			await entityInvoiceNumberingStateService.UpdateForNextAsync(existingInvoice.SellerId, EntityInvoiceNumberingStateUpdateStatus.Deleting, false, existingInvoice);
			bool status = await invoiceRepository.DeleteAsync(id);
			await invoiceRepository.SaveChangesAsync();
			return status;
		}

		public async Task<IPdfGenerationResult> ExportInvoicePdfAsync(int id, string lang)
		{
			Invoice invoiceToExport = await invoiceRepository.GetByIdAsync(id, true);
			IPdfGenerationResult pdfFile = invoicePdfGenerator.ExportInvoicePdf(invoiceToExport, lang);
			return pdfFile;
		}

		private async Task UpdateInvoiceItemsAsync(Invoice existingInvoice, ICollection<InvoiceItemDto> updatedItemDtos)
		{
			List<InvoiceItem> existingItems = existingInvoice.Items.ToList();
			List<InvoiceItem> updatedItems = updatedItemDtos.Select(InvoiceItemMapper.MapToDomain).ToList();
			Dictionary<int, InvoiceItem> updatedItemsDict = updatedItems
				.Where(i => i.Id != 0)
				.ToDictionary(i => i.Id);

			List<InvoiceItem> itemsToRemove = new();
			List<InvoiceItem> itemsToUpdate = new();

			foreach (var existingItem in existingItems)
			{
				if (updatedItemsDict.TryGetValue(existingItem.Id, out var updatedItem))
				{
					existingItem.Unit = updatedItem.Unit;
					existingItem.Quantity = updatedItem.Quantity;
					existingItem.Description = updatedItem.Description;
					existingItem.UnitPrice = updatedItem.UnitPrice;
					existingItem.VatRate = updatedItem.VatRate;
					itemsToUpdate.Add(existingItem);
					updatedItemsDict.Remove(existingItem.Id);
				}
				else
					itemsToRemove.Add(existingItem);
			}

			if (itemsToRemove.Count > 0)
			{
				foreach (var item in itemsToRemove)
					existingInvoice.Items.Remove(item);
			}

			foreach (InvoiceItem newItem in updatedItemsDict.Values)
			{
				newItem.InvoiceId = existingInvoice.Id;
				await invoiceItemRepository.AddAsync(newItem);
			}
		}

		public async Task<InvoiceDto> GetNewInvoiceInformationAsync(int entityId)
		{
			Entity entity = await entityRepository.GetByIdAsync(entityId, true);
			// Get the next invoice number
			string newInvoiceNumber = await entityInvoiceNumberingStateService.GetNextInvoiceNumberAsync(entity.Id, DateTime.Now);
			if (string.IsNullOrEmpty(newInvoiceNumber))
				throw new ArgumentException($"Failed to generate new invoice number for entity with id {entity.Id}");

			return new()
			{
				SellerId = entity.Id,
				Seller = EntityMapper.MapToDto(entity),
				InvoiceNumber = newInvoiceNumber
			};
		}
	}
}
