@using Application.AresApi
@using Application.DTOs
@using Application.ExternalServiceInterfaces
@using Application.ServiceInterfaces
@using Frontend.Models
@using Frontend.Services
@using Frontend.Utils
@using Microsoft.Extensions.Localization
@inject IAresApiService aresApiService
@inject IAddressService addressService
@inject IEntityService entityService
@inject IBankAccountService bankAccountService
@inject LoadingService loadingService
@inject ErrorService errorService
@inject IStringLocalizer<EntityForm> L

<div>
    @if (EntityInstance is null)
    {
        @* ARES API WINDOW *@
        <AresApiLookup UserInputIco="@userInputIco"
            UserInputIcoChanged="@((string ico) => userInputIco = ico)"
            AresApiService="aresApiService"
            AresApiErrorMessage="@aresApiErrorMessage"
            OnFillInAresData="FillInAresData"
            />
    }
    @* ENTITY FORM *@
    <EditForm Model="@entityFormModel" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <div class="row mt-4">
            <div class="col">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="entity-isClient" @bind="entityFormModel.IsClient" />
                    <label for="entity-isClient" class="form-check-label font-weight-bold">@L["IsThisClient"]</label>
                    <ValidationMessage For="@(() => entityFormModel.IsClient)" />
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col">
                <label for="entity-name" class="font-weight-bold">@L["NameLabel"]</label>
                <input type="text" class="form-control" id="entity-name" placeholder="@L["NamePlaceholder"]" @bind="entityFormModel.Name" />
                <ValidationMessage For="@(() => entityFormModel.Name)" />
            </div>
            <div class="col">
                <label for="entity-ico" class="font-weight-bold">@L["IcoLabel"]</label>
                <input type="text" class="form-control" id="entity-ico" placeholder="@L["IcoPlaceholder"]" @bind="entityFormModel.Ico" />
                <ValidationMessage For="@(() => entityFormModel.Ico)" />
            </div>
        </div>
        <div class="row mt-4">
            <div class="col">
                <label for="entity-email" class="font-weight-bold">@L["EmailLabel"]</label>
                <input type="email" class="form-control" id="entity-email" placeholder="@L["EmailPlaceholder"]" @bind="entityFormModel.Email" />
                <ValidationMessage For="@(() => entityFormModel.Email)" />
            </div>
            <div class="col">
                <label for="entity-phone" class="font-weight-bold">@L["PhoneLabel"]</label>
                <input type="tel" class="form-control" id="entity-phone" placeholder="@L["PhonePlaceholder"]" @bind="entityFormModel.PhoneNumber" />
                <ValidationMessage For="@(() => entityFormModel.PhoneNumber)" />
            </div>
        </div>
        <hr />
        @* ADDRESS FORM *@
        <div class="row">
            <div class="col">
                <label for="address-street" class="font-weight-bold">@L["AddressStreetLabel"]</label>
                <input type="text" class="form-control" id="address-street" placeholder="@L["AddressStreetPlaceholder"]" @bind="entityFormModel.Street" />
                <ValidationMessage For="@(() => entityFormModel.Street)" />
            </div>
            <div class="col">
                <label for="address-zipcode" class="font-weight-bold">@L["AddressZipCodeLabel"]</label>
                <input type="number" class="form-control" id="address-zipcode" placeholder="@L["AddressZipCodePlaceholder"]" @bind="entityFormModel.ZipCode" />
                <ValidationMessage For="@(() => entityFormModel.ZipCode)" />
            </div>
        </div>
        <div class="row mt-4">
            <div class="col">
                <label for="address-city" class="font-weight-bold">@L["AddressCityLabel"]</label>
                <input type="text" class="form-control" id="address-city" placeholder="@L["AddressCityPlaceholder"]" @bind="entityFormModel.City" />
                <ValidationMessage For="@(() => entityFormModel.City)" />
            </div>
            <div class="col">
                <label for="address-country" class="font-weight-bold">@L["AddressCountryLabel"]</label>
                <input type="text" class="form-control" id="address-country" placeholder="@L["AddressCountryPlaceholder"]" @bind="entityFormModel.Country" />
                <ValidationMessage For="@(() => entityFormModel.Country)" />
            </div>
        </div>
        <hr />
        @* BANK ACCOUNT FORM *@
        <div class="row">
            <div class="col">
                <label for="bank-acc-accNumber" class="font-weight-bold">@L["BankAccountNumberLabel"]</label>
                <input type="text" class="form-control" id="bank-acc-accNumber" placeholder="@L["BankAccountNumberPlaceholder"]" @bind="entityFormModel.AccountNumber" />
                <ValidationMessage For="@(() => entityFormModel.AccountNumber)" />
            </div>
            <div class="col">
                <label for="bank-acc-accCode" class="font-weight-bold">@L["BankCodeLabel"]</label>
                <input type="text" class="form-control" id="bank-acc-accCode" placeholder="@L["BankCodePlaceholder"]" @bind="entityFormModel.BankCode" />
                <ValidationMessage For="@(() => entityFormModel.BankCode)" />
            </div>
        </div>
        <div class="row my-4">
            <div class="col">
                <label for="bank-acc-name" class="font-weight-bold">@L["BankNameLabel"]</label>
                <input type="text" class="form-control" id="bank-acc-name" placeholder="@L["BankNamePlaceholder"]" @bind="entityFormModel.BankName" />
                <ValidationMessage For="@(() => entityFormModel.BankName)" />
            </div>
            <div class="col">
                <label for="bank-acc-iban" class="font-weight-bold">@L["IBANLabel"]</label>
                <input type="text" class="form-control" id="bank-acc-iban" placeholder="@L["IBANPlaceholder"]" @bind="entityFormModel.IBAN" />
                <ValidationMessage For="@(() => entityFormModel.IBAN)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary float-end" disabled="@loadingService.IsLoading">@L["SubmitButton"]</button>
    </EditForm>
</div>

@code {
    // Parameters
    [Parameter] public EventCallback OnSubmitCallback { get; set; }
    [Parameter] public EntityDto? EntityInstance { get; set; } = null;
    [Parameter, EditorRequired] public bool isActive { get; set; }

    // For ARES API call
    private string userInputIco { get; set; } = string.Empty;
    private string aresApiErrorMessage { get; set; } = string.Empty;

    // Entity Form Model
    private EntityFormModel entityFormModel { get; set; } = new();

    // Methods
    protected override void OnParametersSet()
    {
        if (EntityInstance is not null)
            entityFormModel = EntityFormModel.FromEntity(EntityInstance);
        if (!isActive)
            ResetForm();
    }

    private async Task FillInAresData()
    {
        loadingService.StartLoading();
        aresApiErrorMessage = string.Empty;
        try 
        {
            if (string.IsNullOrEmpty(userInputIco))
            {
                aresApiErrorMessage = "No Ico Provided";
                return;
            }
            var response = await aresApiService.GetEntityInformationByIcoAsync(userInputIco.ToString()!);
            switch (response.IsSuccess)
            {
                case true:
                    SubjectInformation data = (SubjectInformation)response.Data!;
                    FillInForm(data);
                    break;
                case false:
                    AresApiErrorResponse errorData = (AresApiErrorResponse)response.Data!;
                    aresApiErrorMessage = errorData.Popis;
                    break;
            }
        }
        catch (Exception e)
        {
            aresApiErrorMessage = e.Message;
        } 
        finally
        {
            loadingService.StopLoading();
        }
    }

    private void FillInForm(SubjectInformation newData)
    {
        // Clear the error message
        aresApiErrorMessage = string.Empty;
        // Populate the form
        entityFormModel.Ico = newData.ico!;
        entityFormModel.Name = newData.obchodniJmeno!;
        entityFormModel.Street = string.Join(" ", [newData.sidlo!.nazevUlice, newData.sidlo.cisloDomovni]);
        entityFormModel.ZipCode = newData.sidlo.psc;
        entityFormModel.City = newData.sidlo.nazevObce!;
        entityFormModel.Country = newData.sidlo.nazevStatu!;
    }

    private void ResetForm()
    {
        entityFormModel = new();
        userInputIco = string.Empty;
        aresApiErrorMessage = string.Empty;
    }

    private async Task SubmitForm() 
    {
        loadingService.StartLoading();
        try 
        {
            if (EntityInstance is null)
                await SubmitNewEntity();
            else
                await SubmitEditEntity();
            await OnSubmitCallback.InvokeAsync();
            ResetForm();
        }
        catch (Exception e)
        {
            errorService.ShowError(e.Message);
        }
        finally
        {
            loadingService.StopLoading();
        }
    }

    private async Task SubmitNewEntity() 
    {
        AddressDto newAddress = new()
            {
                Street = entityFormModel.Street,
                ZipCode = entityFormModel.ZipCode,
                City = entityFormModel.City,
                Country = entityFormModel.Country
            };
        // Create the address
        AddressDto newAddressResponse = await addressService.CreateAsync(newAddress);

        // Create the bank account
        var newBankAccount = new BankAccountDto
            {
                AccountNumber = entityFormModel.AccountNumber,
                BankCode = entityFormModel.BankCode,
                BankName = entityFormModel.BankName,
                IBAN = entityFormModel.IBAN
            };
        BankAccountDto newBankAccountResponse = await bankAccountService.CreateAsync(newBankAccount);

        // Create the entity
        var newEntity = new EntityDto
            {
                Ico = entityFormModel.Ico,
                Name = entityFormModel.Name,
                Email = entityFormModel.Email,
                PhoneNumber = entityFormModel.PhoneNumber,
                AddressId = newAddressResponse.Id,
                BankAccountId = newBankAccountResponse.Id,
                IsClient = entityFormModel.IsClient,
            };
        EntityDto newEntityResponse = await entityService.CreateAsync(newEntity);
    }

    private async Task SubmitEditEntity() 
    {
        if (EntityInstance is null)
        {
            aresApiErrorMessage = "Entity instance is null";
            return;
        }
        // Edit the address
        int addressId = EntityInstance.AddressId;
        AddressDto editedAddress = new()
            {
                Id = addressId,
                Street = entityFormModel.Street,
                ZipCode = entityFormModel.ZipCode,
                City = entityFormModel.City,
                Country = entityFormModel.Country
            };
        AddressDto editedAddressResponse = await addressService.UpdateAsync(addressId, editedAddress);

        // Edit the bank account
        int bankAccountId = EntityInstance.BankAccountId;
        BankAccountDto editedBankAccount = new()
            {
                Id = bankAccountId,
                AccountNumber = entityFormModel.AccountNumber,
                BankCode = entityFormModel.BankCode,
                BankName = entityFormModel.BankName,
                IBAN = entityFormModel.IBAN
            };
        BankAccountDto? editedBankAccountResponse = await bankAccountService.UpdateAsync(bankAccountId, editedBankAccount);

        // Edit the entity
        EntityDto editedEntity = EntityInstance with
            {
                Ico = entityFormModel.Ico,
                Name = entityFormModel.Name,
                Email = entityFormModel.Email,
                PhoneNumber = entityFormModel.PhoneNumber,
                CurrentNumberingSchemeId = EntityInstance.CurrentNumberingSchemeId,
                AddressId = editedAddressResponse.Id,
                BankAccountId = editedBankAccountResponse.Id,
                IsClient = entityFormModel.IsClient
            };
        EntityDto editedEntityResponse = await entityService.UpdateAsync(editedEntity.Id, editedEntity);
    }
}