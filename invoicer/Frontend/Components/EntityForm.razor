@using Application.AresApiModels;
@using Application.DTOs;
@using Application.ServiceInterfaces;
@using Domain.Interfaces;
@using Frontend.Models;
@using Frontend.Services
@using Frontend.Utils;
@inject IAresApiService aresApiService;
@inject IAddressService addressService;
@inject IEntityService entityService;
@inject IBankAccountService bankAccountService;
@inject LoadingService loadingService;

<div>
    @* ARES API WINDOW *@
    <AresApiLookup UserInputIco="@userInputIco"
    UserInputIcoChanged="@((string ico) => userInputIco = ico)"
    AresApiService="aresApiService"
    AresApiErrorMessage="@aresApiErrorMessage"
    OnFillInAresData="FillInAresData" />
    @* ENTITY FORM *@
    <EditForm Model="@entityFormModel" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <div class="row mb-4">
            <div class="col">
                <label for="entity-name" class="font-weight-bold">Name</label>
                <input type="text" class="form-control" id="entity-name" placeholder="Enter Name" @bind="entityFormModel.Name" />
                <ValidationMessage For="@(() => entityFormModel.Name)" />
            </div>
            <div class="col">
                <label for="entity-ico" class="font-weight-bold">ICO</label>
                <input type="text" class="form-control" id="entity-ico" placeholder="Enter ICO" @bind="entityFormModel.Ico" />
                <ValidationMessage For="@(() => entityFormModel.Ico)" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="entity-email" class="font-weight-bold">Email Address</label>
                <input type="email" class="form-control" id="entity-email" placeholder="Enter Email" @bind="entityFormModel.Email" />
                <ValidationMessage For="@(() => entityFormModel.Email)" />
            </div>
            <div class="col">
                <label for="entity-phone" class="font-weight-bold">Phone Number</label>
                <input type="tel" class="form-control" id="entity-phone" placeholder="Enter Phone Number" @bind="entityFormModel.PhoneNumber" />
                <ValidationMessage For="@(() => entityFormModel.PhoneNumber)" />
            </div>
        </div>
        <hr />
        @* ADDRESS FORM *@
        <div class="row mb-4">
            <div class="col">
                <label for="address-street" class="font-weight-bold">Street And Number</label>
                <input type="text" class="form-control" id="address-street" placeholder="Street And Number" @bind="entityFormModel.Street" />
                <ValidationMessage For="@(() => entityFormModel.Street)" />
            </div>
            <div class="col">
                <label for="address-zipcode" class="font-weight-bold">Zip Code</label>
                <input type="number" class="form-control" id="address-zipcode" placeholder="Zip Code" @bind="entityFormModel.ZipCode" />
                <ValidationMessage For="@(() => entityFormModel.ZipCode)" />
            </div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <label for="address-city" class="font-weight-bold">City</label>
                <input type="text" class="form-control" id="address-city" placeholder="City" @bind="entityFormModel.City" />
                <ValidationMessage For="@(() => entityFormModel.City)" />
            </div>
            <div class="col">
                <label for="address-country" class="font-weight-bold">Country</label>
                <input type="text" class="form-control" id="address-country" placeholder="Country" @bind="entityFormModel.Country" />
                <ValidationMessage For="@(() => entityFormModel.Country)" />
            </div>
        </div>
        <hr />
        @* BANK ACCOUNT FORM *@
        <div class="row mb-4">
            <div class="col">
                <label for="bank-acc-accNumber" class="font-weight-bold">Account Number</label>
                <input type="text" class="form-control" id="bank-acc-accNumber" placeholder="Account Number" @bind="entityFormModel.AccountNumber" />
                <ValidationMessage For="@(() => entityFormModel.AccountNumber)" />
            </div>
            <div class="col">
                <label for="bank-acc-accCode" class="font-weight-bold">Bank Code</label>
                <input type="text" class="form-control" id="bank-acc-accCode" placeholder="Bank Code" @bind="entityFormModel.BankCode" />
                <ValidationMessage For="@(() => entityFormModel.BankCode)" />
            </div>
        </div>
        <div class="row mb-4">
            <div class="col">
                <label for="bank-acc-name" class="font-weight-bold">Bank Name</label>
                <input type="text" class="form-control" id="bank-acc-name" placeholder="Bank Name" @bind="entityFormModel.BankName" />
                <ValidationMessage For="@(() => entityFormModel.BankName)" />
            </div>
            <div class="col">
                <label for="bank-acc-iban" class="font-weight-bold">IBAN</label>
                <input type="text" class="form-control" id="bank-acc-iban" placeholder="IBAN" @bind="entityFormModel.IBAN" />
                <ValidationMessage For="@(() => entityFormModel.IBAN)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary float-end mt-4" disabled="@loadingService.IsLoading">Submit</button>
    </EditForm>
</div>

@code {
    // Parameters
    [Parameter] public EventCallback SubmitCallback { get; set; }
    [Parameter] public EntityDto? EntityInstance { get; set; } = null;
    [Parameter, EditorRequired] public bool isActive { get; set; }

    // For ARES API call
    private string userInputIco { get; set; } = string.Empty;
    private string aresApiErrorMessage { get; set; } = string.Empty;

    // Entity Form Model
    private EntityFormModel entityFormModel { get; set; } = new EntityFormModel();

    // Methods
    protected override void OnParametersSet()
    {
        if (EntityInstance is not null)
            entityFormModel = EntityFormModel.FromEntity(EntityInstance);
        if (!isActive)
            ClearForm();
    }

    private async Task FillInAresData()
    {
        loadingService.StartLoading();
        aresApiErrorMessage = string.Empty;
        try 
        {
            if (string.IsNullOrEmpty(userInputIco))
            {
                aresApiErrorMessage = "No Ico Provided";
                return;
            }
            var response = await aresApiService.GetEntityInformationByIcoAsync(userInputIco.ToString()!);
            switch (response.IsSuccess)
            {
                case true:
                    SubjectInformation data = (SubjectInformation)response.Data!;
                    FillInForm(data);
                    break;
                case false:
                    AresApiErrorResponse errorData = (AresApiErrorResponse)response.Data!;
                    aresApiErrorMessage = errorData.Popis;
                    break;
            }
        }
        catch (Exception e)
        {
            aresApiErrorMessage = e.Message;
        } 
        finally
        {
            loadingService.StopLoading();
        }
    }

    private void FillInForm(SubjectInformation newData)
    {
        // Clear the error message
        aresApiErrorMessage = string.Empty;
        // Populate the form
        entityFormModel.Ico = newData.ico!;
        entityFormModel.Name = newData.obchodniJmeno!;
        entityFormModel.Street = newData.sidlo!.nazevUlice + newData.sidlo.cisloDomovni;
        entityFormModel.ZipCode = newData.sidlo.psc;
        entityFormModel.City = newData.sidlo.nazevObce!;
        entityFormModel.Country = newData.sidlo.nazevStatu!;
    }

    private void ClearForm()
    {
        entityFormModel = new EntityFormModel();
        userInputIco = string.Empty;
    }

    private async Task SubmitForm() 
    {
        loadingService.StartLoading();
        try 
        {
            if (EntityInstance is null)
            {
                await SubmitNewEntity();
                return;
            }
            await SubmitEditEntity();
        }
        catch (Exception e)
        {
            aresApiErrorMessage = e.Message;
        }
        finally
        {
            loadingService.StopLoading();
            await SubmitCallback.InvokeAsync();
            ClearForm();
        }
    }

    private async Task SubmitNewEntity() {
        try
        {
            AddressDto newAddress = new()
                {
                    Street = entityFormModel.Street,
                    ZipCode = entityFormModel.ZipCode,
                    City = entityFormModel.City,
                    Country = entityFormModel.Country
                };
            // Create the address
            AddressDto newAddressResponse = await addressService.CreateAsync(newAddress);

            // Create the bank account
            var newBankAccount = new BankAccountDto
                {
                    AccountNumber = entityFormModel.AccountNumber,
                    BankCode = entityFormModel.BankCode,
                    BankName = entityFormModel.BankName,
                    IBAN = entityFormModel.IBAN
                };
            BankAccountDto newBankAccountResponse = await bankAccountService.CreateAsync(newBankAccount);

            // Create the entity
            var newEntity = new EntityDto
                {
                    Ico = entityFormModel.Ico,
                    Name = entityFormModel.Name,
                    Email = entityFormModel.Email,
                    PhoneNumber = entityFormModel.PhoneNumber,
                    AddressId = newAddressResponse.Id,
                    BankAccountId = newBankAccountResponse.Id
                };
            EntityDto newEntityResponse = await entityService.CreateAsync(newEntity);
        } 
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task SubmitEditEntity() 
    {
        try
        {
            if (EntityInstance is null)
            {
                aresApiErrorMessage = "Entity instance is null";
                return;
            }
            // Edit the address
            int addressId = EntityInstance.AddressId;
            AddressDto editedAddress = new()
                {
                    Id = addressId,
                    Street = entityFormModel.Street,
                    ZipCode = entityFormModel.ZipCode,
                    City = entityFormModel.City,
                    Country = entityFormModel.Country
                };
            AddressDto editedAddressResponse = await addressService.UpdateAsync(addressId, editedAddress);

            // Edit the bank account
            int bankAccountId = EntityInstance.BankAccountId;
            BankAccountDto editedBankAccount = new()
                {
                    Id = bankAccountId,
                    AccountNumber = entityFormModel.AccountNumber,
                    BankCode = entityFormModel.BankCode,
                    BankName = entityFormModel.BankName,
                    IBAN = entityFormModel.IBAN
                };
            BankAccountDto? editedBankAccountResponse = await bankAccountService.UpdateAsync(bankAccountId, editedBankAccount);

            // Edit the entity
            EntityDto editedEntity = EntityInstance with
                {
                    Ico = entityFormModel.Ico,
                    Name = entityFormModel.Name,
                    Email = entityFormModel.Email,
                    PhoneNumber = entityFormModel.PhoneNumber,
                    CurrentNumberingSchemeId = EntityInstance.CurrentNumberingSchemeId,
                    AddressId = editedAddressResponse.Id,
                    BankAccountId = editedBankAccountResponse.Id
                };
            EntityDto editedEntityResponse = await entityService.UpdateAsync(editedEntity.Id, editedEntity);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}