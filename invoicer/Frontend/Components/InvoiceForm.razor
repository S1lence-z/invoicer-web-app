@using Application.DTOs;
@using Application.Extensions;
@using Application.ServiceInterfaces;
@using Domain.Enums;
@using Domain.Interfaces;
@using Frontend.Models
@using Frontend.Services
@using Frontend.Utils;
@inject IInvoiceService invoiceService;
@inject IEntityService entityService;
@inject ErrorService errorService;
@inject LoadingService loadingService;

<EditForm Model="@invoiceFormModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-4">
        <div class="col">
            <div class="d-flex flex-row gap-4 align-items-end">
                <div class="d-flex flex-column">
                    <label for="invoice-number" class="font-weight-bold">Invoice Number</label>
                    <input type="text" class="form-control" id="invoice-number"
                    value="@((isFetchingNextInvoiceNumber ? LOADING_MESSAGE : invoiceFormModel.InvoiceNumber))"
                    @oninput="e => invoiceFormModel.InvoiceNumber = e.Value?.ToString()!" 
                    disabled="@(!isCustomInvoiceNumber)"
                    />
                    <ValidationMessage For="@(() => invoiceFormModel.InvoiceNumber)" />
                </div>
                <button type="button" class="btn btn-outline-secondary align-self-end" @onclick="ToggleCustomInvoiceNumber">
                    @if (isCustomInvoiceNumber)
                    {
                        <span>Use Default</span>
                    }
                    else
                    {
                        <span>Customize</span>
                    }
                </button>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="issue-date" class="font-weight-bold">Issue Date</label>
            <input type="date" class="form-control" id="issue-date" @bind="invoiceFormModel.IssueDate" />
            <ValidationMessage For="@(() => invoiceFormModel.IssueDate)" />
        </div>
        <div class="col">
            <label for="due-date" class="font-weight-bold">Due Date</label>
            <input type="date" class="form-control" id="due-date" @bind="invoiceFormModel.DueDate" />
            <ValidationMessage For="@(() => invoiceFormModel.DueDate)" />
        </div>
        <div class="col">
            <label for="vate-date" class="font-weight-bold">Vat Date</label>
            <input type="date" class="form-control" id="vat-date" @bind="invoiceFormModel.VatDate" />
            <ValidationMessage For="@(() => invoiceFormModel.VatDate)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="seller" class="font-weight-bold">Seller</label>
            <select class="form-control" id="seller" @bind="invoiceFormModel.SellerId" @bind:after="OnChosenSellerChangedAfterBind" disabled="@(InvoiceInstance is not null)">
                @if (invoiceFormModel.SellerId == 0)
                {
                    <option value="0">Select a seller</option>
                }
                @foreach (var entity in allEntities)
                {
                    <option value="@entity.Id">@entity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.SellerId)" />
        </div>
        <div class="col">
            <label for="buyer" class="font-weight-bold">Buyer</label>
            <select class="form-control" id="buyer" @bind="invoiceFormModel.BuyerId">
                @if (invoiceFormModel.SellerId == 0)
                {
                    <option value="0">Select a buyer</option>
                }
                @foreach (var entity in allEntities.Where(e => e.Id != invoiceFormModel.SellerId))
                {
                    <option value="@entity.Id">@entity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.BuyerId)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="currency" class="font-weight-bold">Currency</label>
            <select class="form-control" id="currency" @bind="invoiceFormModel.Currency">
                @foreach (object value in Enum.GetValues(typeof(Currency)))
                {
                    <option value="@value">@value</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.Currency)" />
        </div>
        <div class="col">
            <label for="payment-method" class="font-weight-bold">Payment Method</label>
            <select class="form-control" id="payment-method" @bind="invoiceFormModel.PaymentMethod">
                @foreach (object value in Enum.GetValues(typeof(PaymentMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.PaymentMethod)" />
        </div>
        <div class="col">
            <label for="delivery-method" class="font-weight-bold">Delivery Method</label>
            <select class="form-control" id="delivery-method" @bind="invoiceFormModel.DeliveryMethod">
                @foreach (object value in Enum.GetValues(typeof(DeliveryMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.DeliveryMethod)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="status" class="font-weight-bold">Status</label>
            <select class="form-control" id="status" @bind="invoiceFormModel.Status">
                @foreach (object value in Enum.GetValues(typeof(InvoiceStatus)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.Status)" />
        </div>
    </div>

    <hr />
    <h4>Invoice Items</h4>
    <div class="mb-3">
        <button type="button" class="btn btn-success" @onclick="AddInvoiceItem">Add Item</button>
    </div>
    @foreach (var item in invoiceFormModel.Items)
    {
        <div class="row mb-2 align-items-end">
            <div class="col">
                <label for="item-description" class="font-weight-bold">Description</label>
                <input id="item-description" type="text" class="form-control" placeholder="Description" @bind="item.Description" />
                <ValidationMessage For="@(() => item.Description)" />
            </div>
            <div class="col">
                <label for="item-quantity" class="font-weight-bold">Quantity</label>
                <input id="item-quantity" type="number" min="1" class="form-control" placeholder="Quantity" @bind="item.Quantity" />
                <ValidationMessage For="@(() => item.Quantity)" />
            </div>
            <div class="col">
                <label for="item-unit" class="font-weight-bold">Unit</label>
                <input id="item-unit" type="text" class="form-control" placeholder="Unit" @bind="item.Unit" />
                <ValidationMessage For="@(() => item.Unit)" />
            </div>
            <div class="col">
                <label for="item-unit-price" class="font-weight-bold">Unit Price</label>
                <input id="item-unit-price" type="number" min="0" class="form-control" placeholder="Unit Price" @bind="item.UnitPrice" />
                <ValidationMessage For="@(() => item.UnitPrice)" />
            </div>
            <div class="col">
                <label for="item-vat-rate" class="font-weight-bold">VAT Rate</label>
                <input id="item-vat-rate" type="number" min="0" class="form-control" placeholder="VAT Rate" @bind="item.VatRate" step="0.01" />
                <ValidationMessage For="@(() => item.VatRate)" />
            </div>
            <div class="col">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveInvoiceItem(item)">Remove</button>
            </div>
        </div>
    }
    <button type="submit" class="btn btn-primary float-end mt-4">Submit Invoice</button>
</EditForm>

@code {
    // Parameters
    [Parameter] public EventCallback SubmitCallback { get; set; }
    [Parameter] public InvoiceDto? InvoiceInstance { get; set; } = null;
    [Parameter, EditorRequired] public bool isActive { get; set; }

    // Form Models
    private InvoiceFormModel invoiceFormModel { get; set; } = new();
    private IList<EntityDto> allEntities = new List<EntityDto>();

    // Variables
    private bool isCustomInvoiceNumber = false;
    private bool isFetchingNextInvoiceNumber = false;
    private string nextFetchedInvoiceNumber = string.Empty;

    // Constants
    private const string LOADING_MESSAGE = "Loading...";

    // Methods
    protected override void OnParametersSet()
    {
        if (InvoiceInstance is not null)
            invoiceFormModel = InvoiceFormModel.FromInvoice(InvoiceInstance);
        if (!isActive)
            ResetForm();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allEntities = await entityService.GetAllAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void ToggleCustomInvoiceNumber()
    {
        isCustomInvoiceNumber = !isCustomInvoiceNumber;
        invoiceFormModel.IsCustomInvoiceNumber = isCustomInvoiceNumber;
        if (!isCustomInvoiceNumber)
            invoiceFormModel.InvoiceNumber = nextFetchedInvoiceNumber;
    }

    private async Task SubmitForm() {
        loadingService.StartLoading();
        try 
        {
            if (InvoiceInstance is null)
                await SubmitNewInvoice();
            else
                await SubmitEditInvoice();
            await SubmitCallback.InvokeAsync();
            ResetForm();
        } 
        catch (Exception e) 
        {
            errorService.ShowError(e.Message);
        }
        finally 
        {
            loadingService.StopLoading();
        }
    }

    private async Task SubmitNewInvoice() 
    {
        InvoiceDto newInvoice = new()
            {
                InvoiceNumber = invoiceFormModel.InvoiceNumber,
                IsCustomInvoiceNumber = invoiceFormModel.IsCustomInvoiceNumber,
                IssueDate = invoiceFormModel.IssueDate,
                DueDate = invoiceFormModel.DueDate,
                VatDate = invoiceFormModel.VatDate,
                Status = invoiceFormModel.Status,
                SellerId = invoiceFormModel.SellerId,
                BuyerId = invoiceFormModel.BuyerId,
                Currency = invoiceFormModel.Currency,
                PaymentMethod = invoiceFormModel.PaymentMethod,
                DeliveryMethod = invoiceFormModel.DeliveryMethod,
                Items = invoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()

            };
        InvoiceDto createdInvoice = await invoiceService.CreateAsync(newInvoice);
    }

    private async Task SubmitEditInvoice()
    {
        if (InvoiceInstance is null)
            return;
        InvoiceDto editedInvoice = InvoiceInstance with
        {
            InvoiceNumber = invoiceFormModel.InvoiceNumber,
            IsCustomInvoiceNumber = invoiceFormModel.IsCustomInvoiceNumber,
            IssueDate = invoiceFormModel.IssueDate,
            DueDate = invoiceFormModel.DueDate,
            VatDate = invoiceFormModel.VatDate,
            Status = invoiceFormModel.Status,
            SellerId = invoiceFormModel.SellerId,
            BuyerId = invoiceFormModel.BuyerId,
            Currency = invoiceFormModel.Currency,
            PaymentMethod = invoiceFormModel.PaymentMethod,
            DeliveryMethod = invoiceFormModel.DeliveryMethod,
            Items = invoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()
        };
        InvoiceDto updatedInvoice = await invoiceService.UpdateAsync(editedInvoice.Id, editedInvoice);
    }

    private void ResetForm()
    {
        isCustomInvoiceNumber = false;
        nextFetchedInvoiceNumber = string.Empty;
        invoiceFormModel = new();
    }

    private void AddInvoiceItem()
    {
        invoiceFormModel.Items.Add(new());
    }

    private void RemoveInvoiceItem(InvoiceItemFormModel item)
    {
        invoiceFormModel.Items.Remove(item);
    }

    private async Task OnChosenSellerChangedAfterBind()
    {
        int sellerId = invoiceFormModel.SellerId;
        InvoiceDto? newInvoice = await GetNewOrUpdatedInvoiceInitialData(sellerId);
        if (newInvoice is null)
            return;
        invoiceFormModel.InvoiceNumber = newInvoice.InvoiceNumber;
    }

    private async Task<InvoiceDto?> GetNewOrUpdatedInvoiceInitialData(int sellerId)
    {
        if (sellerId == 0) return null;
        isFetchingNextInvoiceNumber = true;
        try
        {
            InvoiceDto newInvoice = await invoiceService.GetNewInvoiceInformationAsync(sellerId);
            return newInvoice;
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
            return null;
        }
        finally
        {
            isFetchingNextInvoiceNumber = false;
        }
    }
}
