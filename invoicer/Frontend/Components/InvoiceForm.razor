@using Frontend.Models
@using Frontend.Services
@using Frontend.Utils
@using Microsoft.Extensions.Localization
@using Shared.DTOs
@using Shared.Enums
@using Shared.Extensions
@using Shared.ServiceInterfaces
@using System.Net
@using static System.Web.HttpUtility

@inject IInvoiceService invoiceService
@inject IEntityService entityService
@inject ErrorService errorService
@inject LoadingService loadingService
@inject NavigationManager navigationManager
@inject IStringLocalizer<InvoiceForm> L

<EditForm Model="@InvoiceFormModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-4">
        <div class="col">
            <div class="d-flex flex-row gap-4 align-items-end">
                <div class="d-flex flex-column">
                    <label for="invoice-number" class="font-weight-bold">@L["InvoiceNumberLabel"]</label>
                    <input type="text" class="form-control" id="invoice-number"
                    value="@((isFetchingNextInvoiceNumber ? L["LoadingMessage"] : InvoiceFormModel.InvoiceNumber))"
                    @oninput="e => InvoiceFormModel.InvoiceNumber = e.Value?.ToString()!"
                    disabled="@(!isCustomInvoiceNumber)" />
                </div>
                <button type="button" class="btn btn-outline-secondary align-self-end" @onclick="ToggleCustomInvoiceNumber">
                    @if (isCustomInvoiceNumber)
                    {
                        <span>@L["InvoiceNumberUseDefaultButton"]</span>
                    }
                    else
                    {
                        <span>@L["InvoiceNumberCustomizeButton"]</span>
                    }
                </button>
            </div>
            <ValidationMessage For="@(() => InvoiceFormModel.InvoiceNumber)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="issue-date" class="font-weight-bold">@L["IssueDateLabel"]</label>
            <input type="date" class="form-control" id="issue-date" @bind="InvoiceFormModel.IssueDate" />
            <ValidationMessage For="@(() => InvoiceFormModel.IssueDate)" />
        </div>
        <div class="col">
            <label for="due-date" class="font-weight-bold">@L["DueDateLabel"]</label>
            <input type="date" class="form-control" id="due-date" @bind="InvoiceFormModel.DueDate" />
            <ValidationMessage For="@(() => InvoiceFormModel.DueDate)" />
        </div>
        <div class="col">
            <label for="vate-date" class="font-weight-bold">@L["VatDateLabel"]</label>
            <input type="date" class="form-control" id="vat-date" @bind="InvoiceFormModel.VatDate" />
            <ValidationMessage For="@(() => InvoiceFormModel.VatDate)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="seller" class="font-weight-bold">@L["SellerLabel"]</label>
            <select class="form-control" id="seller" @bind="InvoiceFormModel.SellerId" @bind:after="OnChosenSellerChangedAfterBind" disabled="@(InvoiceInstance is not null)">
                <option value="0">@L["SellerSelectOption"]</option>
                @foreach (var entity in AllEntities)
                {
                    <option value="@entity.Id">@entity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => InvoiceFormModel.SellerId)" />
        </div>
        <div class="col d-flex flex-row align-items-end gap-2">
            <div class="flex-grow-1">
                <label for="buyer" class="font-weight-bold">@L["BuyerLabel"]</label>
                <select class="form-control" id="buyer" @bind="InvoiceFormModel.BuyerId">
                    <option value="0">@L["BuyerSelectOption"]</option>
                    @foreach (var entity in AllBuyers)
                    {
                        <option value="@entity.Id">@entity.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => InvoiceFormModel.BuyerId)" />
            </div>
            @if (InvoiceInstance is null)
            {
                <button type="button" class="btn btn-success" @onclick="AddNewEntity">+</button>
            }
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="currency" class="font-weight-bold">@L["CurrencyLabel"]</label>
            <select class="form-control" id="currency" @bind="InvoiceFormModel.Currency">
                @foreach (Currency value in Enum.GetValues(typeof(Currency)))
                {
                    <option value="@value">@value</option>
                }
            </select>
            <ValidationMessage For="@(() => InvoiceFormModel.Currency)" />
        </div>
        <div class="col">
            <label for="payment-method" class="font-weight-bold">@L["PaymentMethodLabel"]</label>
            <select class="form-control" id="payment-method" @bind="InvoiceFormModel.PaymentMethod">
                @foreach (PaymentMethod value in Enum.GetValues(typeof(PaymentMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => InvoiceFormModel.PaymentMethod)" />
        </div>
        <div class="col">
            <label for="delivery-method" class="font-weight-bold">@L["DeliveryMethodLabel"]</label>
            <select class="form-control" id="delivery-method" @bind="InvoiceFormModel.DeliveryMethod">
                @foreach (DeliveryMethod value in Enum.GetValues(typeof(DeliveryMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => InvoiceFormModel.DeliveryMethod)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="status" class="font-weight-bold">@L["StatusLabel"]</label>
            <select class="form-control" id="status" @bind="InvoiceFormModel.Status">
                @foreach (InvoiceStatus value in Enum.GetValues(typeof(InvoiceStatus)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => InvoiceFormModel.Status)" />
        </div>
    </div>

    <hr class="my-4" />
    <h4>@L["InvoiceItemsHeader"]</h4>
    @if (!InvoiceFormModel.Items.Any())
    {
        <p class="text-muted">@L["NoItemsAddedMessage"]</p>
        <ValidationMessage For="@(() => InvoiceFormModel.Items)" />
    }
    @foreach (InvoiceItemFormModel item in InvoiceFormModel.Items)
    {
        int uniqueItemHash = item.GetHashCode();
        <div class="row g-2 mb-3 pb-3 border-bottom align-items-start">
            <div class="col-md-4">
                <label for="item-description-@uniqueItemHash" class="form-label small">@L["ItemDescriptionLabel"]</label>
                <input id="item-description-@uniqueItemHash" type="text" class="form-control form-control-sm" placeholder="@L["ItemDescriptionPlaceholder"]" @bind="item.Description" />
                <ValidationMessage For="@(() => item.Description)" />
            </div>
            <div class="col-md-1 col-6">
                <label for="item-quantity-@uniqueItemHash" class="form-label small">@L["ItemQuantityLabel"]</label>
                <input id="item-quantity-@uniqueItemHash" type="number" min="1" class="form-control form-control-sm" placeholder="@L["ItemQuantityPlaceholder"]" @bind="item.Quantity" />
                <ValidationMessage For="@(() => item.Quantity)" />
            </div>
            <div class="col-md-2 col-6">
                <label for="item-unit-@uniqueItemHash" class="form-label small">@L["ItemUnitLabel"]</label>
                <input id="item-unit-@uniqueItemHash" type="text" class="form-control form-control-sm" placeholder="@L["ItemUnitPlaceholder"]" @bind="item.Unit" />
                <ValidationMessage For="@(() => item.Unit)" />
            </div>
            <div class="col-md-2">
                <label for="item-unit-price-@uniqueItemHash" class="form-label small">@L["ItemUnitPriceLabel"]</label>
                <input id="item-unit-price-@uniqueItemHash" type="number" min="0" step="any" class="form-control form-control-sm" placeholder="@L["ItemUnitPricePlaceholder"]" @bind="item.UnitPrice" />
                <ValidationMessage For="@(() => item.UnitPrice)" />
            </div>
            <div class="col-md-2">
                <label for="item-vat-rate-@uniqueItemHash" class="form-label small">@L["ItemVatRateLabel"]</label>
                <input id="item-vat-rate-@uniqueItemHash" type="number" min="0" class="form-control form-control-sm" @bind="item.VatRate" step="0.01" />
                <ValidationMessage For="@(() => item.VatRate)" />
                <div class="btn-group btn-group-sm mt-1 d-flex flex-grow-1" role="group" aria-label="@L["VatPresetAriaLabel"]">
                    <button type="button" class="btn btn-outline-secondary flex-fill" @onclick="() => SetVatRate(item, 0)">0</button>
                    <button type="button" class="btn btn-outline-secondary flex-fill" @onclick="() => SetVatRate(item, 15)">15</button>
                    <button type="button" class="btn btn-outline-secondary flex-fill" @onclick="() => SetVatRate(item, 18)">18</button>
                    <button type="button" class="btn btn-outline-secondary flex-fill" @onclick="() => SetVatRate(item, 21)">21</button>
                </div>
            </div>
            <div class="col-md-1 text-end">
                <label class="form-label small d-block invisible">@L["RemoveItemButtonTitle"]</label>
                <button type="button" title="@L["RemoveItemButtonTitle"]" class="btn btn-danger btn-sm" @onclick="() => RemoveInvoiceItem(item)">
                    @L["RemoveItemButtonText"]
                </button>
            </div>
        </div>
    }
    <button type="button" class="btn btn-success float-start" @onclick="AddInvoiceItem">
        @L["AddItemButtonText"]
    </button>
    <button type="submit" class="btn btn-primary float-end">@L["SubmitInvoiceButtonText"]</button>
</EditForm>

@code {
    // Parameters
    [Parameter] public InvoiceDto? InvoiceInstance { get; set; } = null;
    [Parameter] public EventCallback OnSubmitCallback { get; set; }
    [Parameter, EditorRequired] public bool IsActive { get; set; }
    [Parameter, EditorRequired] public EventCallback AddNewEntityCallback { get; set; }

    // Form Models
    private InvoiceFormModel InvoiceFormModel { get; set; } = new();
    private IList<EntityDto> AllEntities = new List<EntityDto>();
    private IList<EntityDto> AllBuyers = new List<EntityDto>();

    // Variables
    private bool isCustomInvoiceNumber = false;
    private bool isFetchingNextInvoiceNumber = false;
    private string defaultFetchedInvoiceNumber { get; set; } = string.Empty;

    // Constants
    private const string LOADING_MESSAGE = "Loading...";

    protected override void OnParametersSet()
    {
        if (InvoiceInstance is not null)
        {
            InvoiceFormModel = InvoiceFormModel.FromInvoice(InvoiceInstance);
            defaultFetchedInvoiceNumber = InvoiceInstance.InvoiceNumber;
        }
        if (!IsActive)
            ResetForm();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEntities();
    }

    private async Task LoadEntities()
    {
        try
        {
            AllEntities = await entityService.GetAllAsync();
            AllBuyers = AllEntities.Where(e => e.Id != InvoiceFormModel.SellerId).ToList();
        }
        catch (Exception e)
        {
            errorService.ShowError(e.Message);
        }
    }

    private void UpdateBuyers(int newSellerId)
    {
        int buyerIdBeforeSellerChange = InvoiceFormModel.BuyerId;

        AllBuyers = AllEntities
            .Where(e => e.Id != newSellerId)
            .ToList();

        if (buyerIdBeforeSellerChange == 0)
            InvoiceFormModel.BuyerId = 0;
        else if (buyerIdBeforeSellerChange == newSellerId || !AllBuyers.Any(b => b.Id == buyerIdBeforeSellerChange))
            InvoiceFormModel.BuyerId = AllBuyers.FirstOrDefault()?.Id ?? 0;
    }

    private void ToggleCustomInvoiceNumber()
    {
        isCustomInvoiceNumber = !isCustomInvoiceNumber;
        InvoiceFormModel.IsCustomInvoiceNumber = isCustomInvoiceNumber;
        if (!isCustomInvoiceNumber)
            InvoiceFormModel.InvoiceNumber = defaultFetchedInvoiceNumber;
    }

    private async Task SubmitForm() {
        loadingService.StartLoading();
        try 
        {
            if (InvoiceInstance is null)
                await SubmitNewInvoice();
            else
                await SubmitEditInvoice();
            await OnSubmitCallback.InvokeAsync();
            ResetForm();
        } 
        catch (Exception e) 
        {
            errorService.ShowError(e.Message);
        }
        finally 
        {
            loadingService.StopLoading();
        }
    }

    private async Task SubmitNewInvoice() 
    {
        InvoiceDto newInvoice = new()
            {
                InvoiceNumber = InvoiceFormModel.InvoiceNumber,
                IsCustomInvoiceNumber = InvoiceFormModel.IsCustomInvoiceNumber,
                IssueDate = InvoiceFormModel.IssueDate,
                DueDate = InvoiceFormModel.DueDate,
                VatDate = InvoiceFormModel.VatDate,
                Status = InvoiceFormModel.Status,
                SellerId = InvoiceFormModel.SellerId,
                BuyerId = InvoiceFormModel.BuyerId,
                Currency = InvoiceFormModel.Currency,
                PaymentMethod = InvoiceFormModel.PaymentMethod,
                DeliveryMethod = InvoiceFormModel.DeliveryMethod,
                Items = InvoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()

            };
        InvoiceDto createdInvoice = await invoiceService.CreateAsync(newInvoice);
    }

    private async Task SubmitEditInvoice()
    {
        if (InvoiceInstance is null)
            return;
        InvoiceDto editedInvoice = InvoiceInstance with
        {
            InvoiceNumber = InvoiceFormModel.InvoiceNumber,
            IsCustomInvoiceNumber = InvoiceFormModel.IsCustomInvoiceNumber,
            IssueDate = InvoiceFormModel.IssueDate,
            DueDate = InvoiceFormModel.DueDate,
            VatDate = InvoiceFormModel.VatDate,
            Status = InvoiceFormModel.Status,
            SellerId = InvoiceFormModel.SellerId,
            BuyerId = InvoiceFormModel.BuyerId,
            Currency = InvoiceFormModel.Currency,
            PaymentMethod = InvoiceFormModel.PaymentMethod,
            DeliveryMethod = InvoiceFormModel.DeliveryMethod,
            Items = InvoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()
        };
        InvoiceDto updatedInvoice = await invoiceService.UpdateAsync(editedInvoice.Id, editedInvoice);
    }

    private void ResetForm()
    {
        isCustomInvoiceNumber = false;
        defaultFetchedInvoiceNumber = string.Empty;
        InvoiceFormModel = new();
    }

    private void AddInvoiceItem()
    {
        InvoiceFormModel.Items.Add(new());
    }

    private void RemoveInvoiceItem(InvoiceItemFormModel item)
    {
        InvoiceFormModel.Items.Remove(item);
    }

    private async Task OnChosenSellerChangedAfterBind()
    {
        int sellerId = InvoiceFormModel.SellerId;
        InvoiceDto? newInvoice = await GetNewOrUpdatedInvoiceInitialData(sellerId);
        if (newInvoice is null)
            return;
        defaultFetchedInvoiceNumber = newInvoice.InvoiceNumber;
        InvoiceFormModel.InvoiceNumber = defaultFetchedInvoiceNumber;
        UpdateBuyers(sellerId);
    }

    private async Task<InvoiceDto?> GetNewOrUpdatedInvoiceInitialData(int sellerId)
    {
        if (sellerId == 0) return null;
        isFetchingNextInvoiceNumber = true;
        try
        {
            InvoiceDto newInvoice = await invoiceService.GetNewInvoiceInformationAsync(sellerId);
            return newInvoice;
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
            return null;
        }
        finally
        {
            isFetchingNextInvoiceNumber = false;
        }
    }

    private void SetVatRate(InvoiceItemFormModel item, decimal ratePercentage)
    {
        item.VatRate = ratePercentage / 100.0m;
    }

    private async Task AddNewEntity()
    {
        await AddNewEntityCallback.InvokeAsync();
        await LoadEntities();
    }
}
