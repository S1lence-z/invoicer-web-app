@using Domain.Enums;
@using Domain.Interfaces;
@using Domain.Models;
@using Domain.ServiceInterfaces;
@using Frontend.Models.FormModels;
@using Frontend.Utils
@inject IInvoiceService invoiceService;
@inject IEntityService entityService;

<EditForm Model="@invoiceFormModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-4">
        <div class="col">
            <label for="invoice-number" class="font-weight-bold">Invoice Number</label>
            <input type="text" class="form-control" id="invoice-number" placeholder="Enter Invoice Number" @bind="invoiceFormModel.InvoiceNumber" />
            <ValidationMessage For="@(() => invoiceFormModel.InvoiceNumber)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="issue-date" class="font-weight-bold">Issue Date</label>
            <input type="date" class="form-control" id="issue-date" @bind="invoiceFormModel.IssueDate" />
            <ValidationMessage For="@(() => invoiceFormModel.IssueDate)" />
        </div>
        <div class="col">
            <label for="due-date" class="font-weight-bold">Due Date</label>
            <input type="date" class="form-control" id="due-date" @bind="invoiceFormModel.DueDate" />
            <ValidationMessage For="@(() => invoiceFormModel.DueDate)" />
        </div>
        <div class="col">
            <label for="vate-date" class="font-weight-bold">Vat Date</label>
            <input type="date" class="form-control" id="vat-date" @bind="invoiceFormModel.VatDate" />
            <ValidationMessage For="@(() => invoiceFormModel.VatDate)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="seller" class="font-weight-bold">Seller</label>
            <select class="form-control" id="seller" @bind="invoiceFormModel.SellerId">
                <option value="">Select Seller</option>
                @foreach (var entity in allEntities)
                {
                    <option value="@entity.Id">@entity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.SellerId)" />
        </div>
        <div class="col">
            <label for="buyer" class="font-weight-bold">Buyer</label>
            <select class="form-control" id="buyer" @bind="invoiceFormModel.BuyerId">
                <option value="">Select Buyer</option>
                @foreach (var entity in allEntities)
                {
                    <option value="@entity.Id">@entity.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.BuyerId)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="currency" class="font-weight-bold">Currency</label>
            <select class="form-control" id="currency" @bind="invoiceFormModel.Currency">
                @foreach (object value in Enum.GetValues(typeof(Currency)))
                {
                    <option value="@value">@value</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.Currency)" />
        </div>
        <div class="col">
            <label for="payment-method" class="font-weight-bold">Payment Method</label>
            <select class="form-control" id="payment-method" @bind="invoiceFormModel.PaymentMethod">
                @foreach (object value in Enum.GetValues(typeof(PaymentMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.PaymentMethod)" />
        </div>
        <div class="col">
            <label for="delivery-method" class="font-weight-bold">Delivery Method</label>
            <select class="form-control" id="delivery-method" @bind="invoiceFormModel.DeliveryMethod">
                @foreach (object value in Enum.GetValues(typeof(DeliveryMethod)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.DeliveryMethod)" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <label for="status" class="font-weight-bold">Status</label>
            <select class="form-control" id="status" @bind="invoiceFormModel.Status">
                @foreach (object value in Enum.GetValues(typeof(InvoiceStatus)))
                {
                    <option value="@value">@value.ToString()!.SeperateCamelCase()</option>
                }
            </select>
            <ValidationMessage For="@(() => invoiceFormModel.Status)" />
        </div>
    </div>

    <hr />
    <h4>Invoice Items</h4>
    <div class="mb-3">
        <button type="button" class="btn btn-success" @onclick="AddInvoiceItem">Add Item</button>
    </div>
    @foreach (var item in invoiceFormModel.Items)
    {
        <div class="row mb-2">
            <div class="col">
                <input type="text" class="form-control" placeholder="Description" @bind="item.Description" />
                <ValidationMessage For="@(() => item.Description)" />
            </div>
            <div class="col">
                <input type="number" class="form-control" placeholder="Quantity" @bind="item.Quantity" />
                <ValidationMessage For="@(() => item.Quantity)" />
            </div>
            <div class="col">
                <input type="text" class="form-control" placeholder="Unit" @bind="item.Unit" />
                <ValidationMessage For="@(() => item.Unit)" />
            </div>
            <div class="col">
                <input type="number" class="form-control" placeholder="Unit Price" @bind="item.UnitPrice" />
                <ValidationMessage For="@(() => item.UnitPrice)" />
            </div>
            <div class="col">
                <input type="number" class="form-control" placeholder="VAT Rate" @bind="item.VatRate" step="0.01" />
                <ValidationMessage For="@(() => item.VatRate)" />
            </div>
            <div class="col">
                <button type="button" class="btn btn-danger" @onclick="() => RemoveInvoiceItem(item)">Remove</button>
            </div>
        </div>
    }
    <button type="submit" class="btn btn-primary float-end mt-4">Submit Invoice</button>
</EditForm>

@code {
    // Parameters
    [Parameter] public EventCallback SubmitCallback { get; set; }
    [Parameter] public Invoice? InvoiceInstance { get; set; } = null;
    [Parameter, EditorRequired] public bool isActive { get; set; }

    // Form Models
    private InvoiceFormModel invoiceFormModel { get; set; } = new();
    private IList<Entity> allEntities = new List<Entity>();

    // Methods
    protected override async Task OnParametersSetAsync()
    {
        allEntities = await entityService.GetAllAsync();
        if (InvoiceInstance is not null)
            invoiceFormModel = InvoiceFormModel.FromInvoice(InvoiceInstance);
        if (!isActive)
            ClearForm();
    }

    private async Task SubmitForm() {
        try 
        {
            if (InvoiceInstance is null) {
                await SubmitNewInvoice();
                return;
            }
            await SubmitEditInvoice();
        } 
        catch (Exception e) 
        {
            Console.WriteLine(e.Message);
        }
        finally 
        {
            await SubmitCallback.InvokeAsync();
            ClearForm();
            StateHasChanged();
        }
    }

    private async Task SubmitNewInvoice() 
    {
        Invoice newInvoice = new Invoice
            {
                InvoiceNumber = invoiceFormModel.InvoiceNumber,
                IssueDate = invoiceFormModel.IssueDate,
                DueDate = invoiceFormModel.DueDate,
                SellerId = invoiceFormModel.SellerId ?? 0,
                BuyerId = invoiceFormModel.BuyerId ?? 0,
                Currency = invoiceFormModel.Currency,
                PaymentMethod = invoiceFormModel.PaymentMethod,
                DeliveryMethod = invoiceFormModel.DeliveryMethod,
                Items = invoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()

            };
        Invoice? createdInvoice = await invoiceService.CreateAsync(newInvoice);
        if (createdInvoice is null) {
            Console.WriteLine("Failed to create invoice");
            return;
        }
        Console.WriteLine("Invoice created");
    }

    private async Task SubmitEditInvoice()
    {
        Invoice editedInvoice = new Invoice
            {
                Id = invoiceFormModel.Id,
                InvoiceNumber = invoiceFormModel.InvoiceNumber,
                IssueDate = invoiceFormModel.IssueDate,
                DueDate = invoiceFormModel.DueDate,
                SellerId = invoiceFormModel.SellerId ?? 0,
                BuyerId = invoiceFormModel.BuyerId ?? 0,
                Currency = invoiceFormModel.Currency,
                PaymentMethod = invoiceFormModel.PaymentMethod,
                DeliveryMethod = invoiceFormModel.DeliveryMethod,
                Items = invoiceFormModel.Items.Select(InvoiceItemFormModel.ToInvoiceItem).ToList()
            };
        Invoice? updatedInvoice = await invoiceService.UpdateAsync(editedInvoice.Id, editedInvoice);
        if (updatedInvoice is null)
        {
            Console.WriteLine("Failed to update invoice");
            return;
        }
        Console.WriteLine("Invoice updated");
    }

    private void ClearForm()
    {
        invoiceFormModel = new InvoiceFormModel();
    }

    private void AddInvoiceItem()
    {
        invoiceFormModel.Items.Add(new InvoiceItemFormModel());
        StateHasChanged();
    }

    private void RemoveInvoiceItem(InvoiceItemFormModel item)
    {
        invoiceFormModel.Items.Remove(item);
        StateHasChanged();
    }
}
