@using Domain.Enums
@using Application.DTOs
@using Application.Extensions
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<InvoiceListItem> L

<div class="card border-1 shadow-sm">
    <div class="card-body row align-items-center">
        <div class="col">
            <span class="fw-bold">@Invoice.InvoiceNumber</span>
        </div>
        <div class="col">
            <span class="text-muted">@Invoice.Seller!.Name</span>
        </div>
        <div class="col">
            <span class="text-muted">@Invoice.Buyer!.Name</span>
        </div>
        <div class="col">
            <span class="text-muted">@Invoice.DueDate.ToString("d")</span>
        </div>
        <div class="col">
            <select class="form-select form-select-sm w-75" @onchange="(e) => OnInvoiceStatusUpdate.InvokeAsync(Invoice with { Status = (InvoiceStatus)Enum.Parse(typeof(InvoiceStatus), e.Value?.ToString()!) })">
                @foreach (InvoiceStatus status in Enum.GetValues(typeof(InvoiceStatus)))
                {
                    <option selected="@(Invoice.Status == status)" class="@GetStatusColorClass(status)" value="@status">
                        @L[status.ToString()]
                    </option>
                }
            </select>
        </div>
        <div class="col">
            <span class="fw-bold">
                @Invoice.Currency.FormatAmount(Invoice.GetTotalWithTax())
            </span>
        </div>
        <div class="col">
            <div class="row gx-1 gy-1">
                <div class="col-6">
                    <button class="btn btn-outline-primary btn-sm w-100" @onclick="() => OnEditInvoice.InvokeAsync(Invoice)">@L["EditButton"]</button>
                </div>
                <div class="col-6">
                    <button class="btn btn-outline-danger btn-sm w-100" @onclick="() => OnDeleteInvoice.InvokeAsync(Invoice)">@L["DeleteButton"]</button>
                </div>
                <div class="col-6">
                    <button class="btn btn-outline-dark btn-sm w-100" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">@L["PreviewButton"]</button>
                </div>
                <div class="col-6">
                    <button class="btn btn-outline-success btn-sm w-100" @onclick="() => OnExportInvoice.InvokeAsync(Invoice)">@L["ExportButton"]</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public InvoiceDto Invoice { get; set; } = null!;

    [Parameter]
    public EventCallback<InvoiceDto> OnDeleteInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnEditInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnExportInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnPreviewInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnInvoiceStatusUpdate { get; set; }

    private string GetStatusColorClass(InvoiceStatus status)
    {
        return status switch
        {
            InvoiceStatus.Pending => "text-warning",
            InvoiceStatus.Paid => "text-success",
            InvoiceStatus.Overdue => "text-danger",
            InvoiceStatus.Draft => "text-dark",
            InvoiceStatus.Cancelled => "text-dark",
            _ => "text-muted"
        };
    }
}