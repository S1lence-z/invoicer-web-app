@using Domain.Enums;
@using Application.DTOs;

<div class="card border-1 shadow-sm">
    <div class="card-body row align-items-center" style="cursor: pointer;">
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="fw-bold">@Invoice.InvoiceNumber</span>
        </div>
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="text-muted">@Invoice.Seller!.Name</span>
        </div>
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="text-muted">@Invoice.Buyer!.Name</span>
        </div>
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="text-muted">@Invoice.DueDate.ToString("d")</span>
        </div>
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="@GetStatusColorClass(Invoice.Status) fw-bold">@Invoice.Status.ToString()</span>
        </div>
        <div class="col" @onclick="() => OnPreviewInvoice.InvokeAsync(Invoice)">
            <span class="fw-bold">
                @CalculateInvoiceSum(Invoice) @Invoice.Currency
            </span>
        </div>
        <div class="col">
            <button class="btn btn-outline-success btn-sm" @onclick="() => OnExportInvoice.InvokeAsync(Invoice)">Export</button>
            <button class="btn btn-outline-primary btn-sm" @onclick="() => OnEditInvoice.InvokeAsync(Invoice)">Edit</button>
            <button class="btn btn-outline-danger btn-sm" @onclick ="() => OnDeleteInvoice.InvokeAsync(Invoice)">Delete</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public InvoiceDto Invoice { get; set; } = null!;

    [Parameter]
    public EventCallback<InvoiceDto> OnDeleteInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnEditInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnExportInvoice { get; set; }

    [Parameter]
    public EventCallback<InvoiceDto> OnPreviewInvoice { get; set; }

    private decimal CalculateInvoiceSum(InvoiceDto invoice)
    {
        decimal total = 0;
        foreach (var item in invoice.Items) 
        {
            decimal itemTotal = item.Quantity * item.UnitPrice;
            total += itemTotal;
        }
        return total;
    }

    private string GetStatusColorClass(InvoiceStatus status)
    {
        return status switch
        {
            InvoiceStatus.Pending => "text-warning",
            InvoiceStatus.Paid => "text-success",
            InvoiceStatus.Overdue => "text-danger",
            _ => "text-muted"
        };
    }
}
