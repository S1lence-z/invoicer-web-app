@using Microsoft.Extensions.Localization
@using Application.ServiceInterfaces
@inject IStringLocalizer<AresApiLookup> L

@* ARES API WINDOW *@
<div class="border border-primary rounded bg-gradient p-2 mb-2 d-flex flex-column justify-content-center">
    <h4 class="text-primary mx-auto">@L["SectionTitle"]</h4>
    <div class="d-flex flex-row gap-4 text-center align-items-center my-2">
        <input type="text" class="form-control" placeholder="@L["IcoInputPlaceholder"]" value="@UserInputIco" @oninput="HandleUserInputChange" />
        <button class="btn btn-success w-50" @onclick="OnFillInAresData.InvokeAsync">@L["FillInButton"]</button>
    </div>
    @if (!string.IsNullOrEmpty(AresApiErrorMessage))
    {
        <p class="text-danger mx-auto">@AresApiErrorMessage</p>
    }
</div>

@code {
    [Parameter, EditorRequired] public IAresApiService AresApiService { get; set; } = null!;
    [Parameter, EditorRequired] public string? UserInputIco { get; set; } = string.Empty;
    [Parameter, EditorRequired] public EventCallback<string> UserInputIcoChanged { get; set; }
    [Parameter, EditorRequired] public EventCallback<bool> OnFillInAresData { get; set; }
    [Parameter, EditorRequired] public string AresApiErrorMessage { get; set; } = string.Empty;

    private async Task HandleUserInputChange(ChangeEventArgs e)
    {
        UserInputIco = e.Value?.ToString();
        await UserInputIcoChanged.InvokeAsync(UserInputIco);
    }
}
