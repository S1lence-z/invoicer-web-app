@page "/invoices";
@using System.Collections.ObjectModel;
@using Application.DTOs;
@using Application.PdfGenerator
@using Application.ServiceInterfaces;
@using Domain.Interfaces;
@using Frontend.Components;
@using Frontend.Services
@inject IInvoiceService invoiceService;
@inject IJSRuntime jsRuntime;
@inject ErrorService errorService;

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3">
    @* HEADER *@
    <div class="d-flex justify-content-between align-items-center px-4 pt-4">
        <h3>Invoices</h3>
        <button class="btn btn-primary" @onclick="ShowAddInvoiceModal">
            Add New Invoice
        </button>
    </div>
    <hr />
    @* CONTENT *@
    <div class="d-flex flex-column pb-4">
        @* FILTER AND SEARCH BAR *@
        <div class="card border-0 mx-4">
            <div class="row g-2">
                <div class="col-md-6">
                    <div class="input-group">
                       <input type="text" class="form-control" placeholder="Search invoices..." @oninput="SearchInvoices" />
                       <select class="form-select" @bind="searchType">
                           <option value="InvoiceNumber">Invoice Number</option>
                           <option value="Buyer">Buyer</option>
                           <option value="Seller">Seller</option>
                       </select>
                    </div>
                </div>
            </div>
        </div>
        @* LIST HEADER *@
        <div class="card border-1 shadow-sm mx-4 my-4">
            <div class="card-body row">
                <div class="col fw-bold">Invoice Number</div>
                <div class="col fw-bold">Seller</div>
                <div class="col fw-bold">Buyer</div>
                <div class="col fw-bold">Due Date</div>
                <div class="col fw-bold">Status</div>
                <div class="col fw-bold">Total</div>
                <div class="col fw-bold">Actions</div>
            </div>
        </div>
        @* INVOICES LIST *@
        <div class="d-flex flex-column overflow-auto px-4 gap-2">
            @if (shownInvoices is null)
            {
                <p>Loading...</p>
            }
            else if (shownInvoices.Count == 0)
            {
                <p>No invoices found</p>
            }
            else
            {
                @foreach (var invoice in shownInvoices)
                {
                    <InvoiceListItem Invoice="invoice" OnDeleteInvoice="DeleteInvoice" OnEditInvoice="EditInvoice" OnExportInvoice="ExportInvoice" OnPreviewInvoice="ShowInvoicePreview" />
                }
            }
        </div>
    </div>
</div>
@* ADD NEW INVOICE MODAL *@
<Modal Title="Add New Invoice" IsVisible="isAddingNewInvoice" OnClose="ShowAddInvoiceModal">
    <InvoiceForm SubmitCallback="ShowAddInvoiceModal" isActive="isAddingNewInvoice" />
</Modal>
@* EDIT INVOICE MODAL *@
<Modal Title="Edit Invoice" IsVisible="isEditingInvoice" OnClose="ShowEditInvoiceModal">
    @if (invoiceToEdit is not null)
    {
        <InvoiceForm SubmitCallback="ShowEditInvoiceModal" isActive="isEditingInvoice" InvoiceInstance="invoiceToEdit" />
    }
</Modal>
@* PREVIEW MODAL *@
<Modal Title="Invoice Preview" IsVisible="isPreviewingInvoice" OnClose="ShowInvoicePreviewModal">
    @if (invoiceToPreview is not null)
    {
        <InvoicePreview Invoice="invoiceToPreview" />
    }
</Modal>

@code {
    private IList<InvoiceDto> allInvoices = new List<InvoiceDto>();
    private IList<InvoiceDto> shownInvoices = new List<InvoiceDto>();
    private InvoiceDto? invoiceToEdit = null;
    private InvoiceDto? invoiceToPreview = null;
    private string searchTerm = string.Empty;
    private SearchType searchType = SearchType.InvoiceNumber;
    // Modal related
    private bool isAddingNewInvoice = false;
    private bool isEditingInvoice = false;
    private bool isPreviewingInvoice = false;

    private enum SearchType {
        InvoiceNumber,
        Buyer,
        Seller
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            allInvoices = (await invoiceService.GetAllAsync()).ToList();
            PopulateShownInvoices(allInvoices);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void PopulateShownInvoices(IList<InvoiceDto> newInvoices)
    {
        shownInvoices.Clear();
        foreach (var inv in newInvoices)
        {
            shownInvoices.Add(inv);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SearchInvoices(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(searchTerm)) 
        {
            PopulateShownInvoices(allInvoices);
            return;
        }
        string search = searchTerm.ToLower();
        switch (searchType) {
            case SearchType.InvoiceNumber:
                PopulateShownInvoices(allInvoices.Where(i => i.InvoiceNumber.Contains(search)).ToList());
                break;
            case SearchType.Buyer:
                PopulateShownInvoices(allInvoices.Where(i => i.Buyer!.Name.ToLower().Contains(search)).ToList());
                break;
            case SearchType.Seller:
                PopulateShownInvoices(allInvoices.Where(i => i.Seller!.Name.ToLower().Contains(search)).ToList());
                break;
            default:
                break;
        }
    }

    private void ShowInvoicePreview(InvoiceDto invToShow)
    {
        invoiceToPreview = invToShow;
        ShowInvoicePreviewModal();
    }

    private async Task EditInvoice(InvoiceDto invToEdit)
    {
        invoiceToEdit = invToEdit;
        await ShowEditInvoiceModal();
        StateHasChanged();
    }

    private async Task DeleteInvoice(InvoiceDto invToDelete)
    {
        try
        {
            bool status = await invoiceService.DeleteAsync(invToDelete.Id);
            if (status)
            {
                await LoadInvoices();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
        }
    }

    private async Task ExportInvoice(InvoiceDto invToExport)
    {
        try
        {
            IPdfGenerationResult response = await invoiceService.ExportInvoicePdfAsync(invToExport.Id);
            if (!response.IsSuccess)
            {
                errorService.ShowError(response.ErrorMessage!);
                return;
            }

            string defaultFileName = response.FileName;
            string? userFileName = await jsRuntime.InvokeAsync<string>("promptFilename", defaultFileName);

            if (string.IsNullOrWhiteSpace(userFileName))
                return;

            if (!userFileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                userFileName += ".pdf";

            await jsRuntime.InvokeVoidAsync("downloadPdf", userFileName, response.Data);
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
        }
    }

    private async Task ShowAddInvoiceModal()
    {
        isAddingNewInvoice = !isAddingNewInvoice;
        if(!isAddingNewInvoice)
            await LoadInvoices();
        StateHasChanged();
    }

    private async Task ShowEditInvoiceModal()
    {
        isEditingInvoice = !isEditingInvoice;
        if (!isEditingInvoice)
            await LoadInvoices();
        StateHasChanged();
    }

    private void ShowInvoicePreviewModal()
    {
        isPreviewingInvoice = !isPreviewingInvoice;
        StateHasChanged();
    }
}
