@page "/invoices";
@using System.Collections.ObjectModel
@using Application.DTOs
@using Application.PdfGenerator
@using Application.ServiceInterfaces
@using Domain.Interfaces
@using Frontend.Components
@using Frontend.Services
@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IInvoiceService invoiceService
@inject IJSRuntime jsRuntime
@inject ErrorService errorService
@inject IStringLocalizer<Invoices> L

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3">
    @* HEADER *@
    <div class="d-flex justify-content-between align-items-center px-4 pt-4">
        <h3>@L["PageTitle"]</h3>
        <button class="btn btn-primary" @onclick="ShowAddInvoiceModal">
            @L["AddNewInvoiceButton"]
        </button>
    </div>
    <hr />
    @* CONTENT *@
    <div class="d-flex flex-column pb-4">
        @* FILTER AND SEARCH BAR *@
        <div class="card border-0 mx-4">
            <div class="row g-2">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="@L["SearchPlaceholder"]" @oninput="SearchInvoices" />
                        <select class="form-select" @bind="searchType">
                            <option value="InvoiceNumber">@L["SearchOptionInvoiceNumber"]</option>
                            <option value="Buyer">@L["SearchOptionBuyer"]</option>
                            <option value="Seller">@L["SearchOptionSeller"]</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        @* LIST HEADER *@
        <div class="card border-1 shadow-sm mx-4 my-4">
            <div class="card-body row">
                <div class="col fw-bold">@L["ListHeaderInvoiceNumber"]</div>
                <div class="col fw-bold">@L["ListHeaderSeller"]</div>
                <div class="col fw-bold">@L["ListHeaderBuyer"]</div>
                <div class="col fw-bold">@L["ListHeaderDueDate"]</div>
                <div class="col fw-bold">@L["ListHeaderStatus"]</div>
                <div class="col fw-bold">@L["ListHeaderTotalWithVAT"]</div>
                <div class="col fw-bold">@L["ListHeaderActions"]</div>
            </div>
        </div>
        @* INVOICES LIST *@
        <div class="d-flex flex-column overflow-auto px-4 gap-2">
            @if (shownInvoices is null)
            {
                <p>@L["LoadingMessage"]</p>
            }
            else if (shownInvoices.Count == 0)
            {
                <p>@L["NoInvoicesFoundMessage"]</p>
            }
            else
            {
                @foreach (var invoice in shownInvoices)
                {
                    <InvoiceListItem Invoice="invoice" OnDeleteInvoice="DeleteInvoice" OnEditInvoice="EditInvoice" OnExportInvoice="ExportInvoice" OnPreviewInvoice="ShowInvoicePreview" OnInvoiceStatusUpdate="UpdateInvoiceStatus" />
                }
            }
        </div>
    </div>
</div>
@* ADD NEW INVOICE MODAL *@
<Modal Title="@L["AddModalTitle"]" IsVisible="isAddingNewInvoice" OnClose="ShowAddInvoiceModal" Size="xl">
    @if (isAddingNewInvoice)
    {
        <InvoiceForm SubmitCallback="HandleAddSubmit" isActive="isAddingNewInvoice" />
    }
</Modal>
@* EDIT INVOICE MODAL *@
<Modal Title="@L["EditModalTitle"]" IsVisible="isEditingInvoice" OnClose="ShowEditInvoiceModal" Size="xl">
    @if (invoiceToEdit is not null)
    {
        <InvoiceForm SubmitCallback="HandleEditSubmit" isActive="isEditingInvoice" InvoiceInstance="invoiceToEdit" />
    }
</Modal>
@* PREVIEW MODAL *@
<Modal Title="@L["PreviewModalTitle"]" IsVisible="isPreviewingInvoice" OnClose="ShowInvoicePreviewModal">
    @if (invoiceToPreview is not null)
    {
        <InvoicePreview Invoice="invoiceToPreview" />
    }
</Modal>

@code {
    private IList<InvoiceDto> allInvoices = new List<InvoiceDto>();
    private IList<InvoiceDto> shownInvoices = new List<InvoiceDto>();
    private InvoiceDto? invoiceToEdit = null;
    private InvoiceDto? invoiceToPreview = null;
    private string searchTerm = string.Empty;
    private SearchType searchType = SearchType.InvoiceNumber;
    // Modal related
    private bool isAddingNewInvoice = false;
    private bool isEditingInvoice = false;
    private bool isPreviewingInvoice = false;

    private enum SearchType {
        InvoiceNumber,
        Buyer,
        Seller
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            allInvoices = (await invoiceService.GetAllAsync()).ToList();
            PopulateShownInvoices(allInvoices);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void PopulateShownInvoices(IList<InvoiceDto> newInvoices)
    {
        shownInvoices.Clear();
        foreach (var inv in newInvoices)
        {
            shownInvoices.Add(inv);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SearchInvoices(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(searchTerm)) 
        {
            PopulateShownInvoices(allInvoices);
            return;
        }
        string search = searchTerm.ToLower();
        switch (searchType) {
            case SearchType.InvoiceNumber:
                PopulateShownInvoices(allInvoices.Where(i => i.InvoiceNumber.ToLower().Contains(search)).ToList());
                break;
            case SearchType.Buyer:
                PopulateShownInvoices(allInvoices.Where(i => i.Buyer!.Name.ToLower().Contains(search)).ToList());
                break;
            case SearchType.Seller:
                PopulateShownInvoices(allInvoices.Where(i => i.Seller!.Name.ToLower().Contains(search)).ToList());
                break;
            default:
                PopulateShownInvoices(allInvoices);
                break;
        }
    }

    private void ShowInvoicePreview(InvoiceDto invToShow)
    {
        invoiceToPreview = invToShow;
        ShowInvoicePreviewModal();
    }

    private async Task EditInvoice(InvoiceDto invToEdit)
    {
        invoiceToEdit = invToEdit;
        await ShowEditInvoiceModal();
        StateHasChanged();
    }

    private async Task DeleteInvoice(InvoiceDto invToDelete)
    {
        try
        {
            bool status = await invoiceService.DeleteAsync(invToDelete.Id);
            if (status)
            {
                await LoadInvoices();
            }
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
        }
    }

    private async Task<bool> UpdateInvoiceStatus(InvoiceDto invToUpdate)
    {
        try
        {
            InvoiceDto updatedInvoice = await invoiceService.UpdateAsync(invToUpdate.Id, invToUpdate);
            int index = shownInvoices.IndexOf(shownInvoices.FirstOrDefault(i => i.Id == invToUpdate.Id)!);
            if (index != -1)
                shownInvoices[index].Status = updatedInvoice.Status;
            else
                throw new Exception("Invoice not found in the list.");
            return true;
        }
        catch (Exception e)
        {
            errorService.ShowError(e.Message);
            return false;
        }
    }

    private async Task ExportInvoice(InvoiceDto invToExport)
    {
        try
        {
            string currentCultureName = CultureInfo.CurrentCulture.Name;
            if (string.IsNullOrEmpty(currentCultureName))
                currentCultureName = "en-US";

            IPdfGenerationResult response = await invoiceService.ExportInvoicePdfAsync(invToExport.Id, currentCultureName);
            if (!response.IsSuccess)
            {
                errorService.ShowError(response.ErrorMessage!);
                return;
            }

            string defaultFileName = response.FileName;
            string? userFileName = await jsRuntime.InvokeAsync<string>("promptFilename", defaultFileName);

            if (string.IsNullOrWhiteSpace(userFileName))
                return;

            if (!userFileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                userFileName += ".pdf";

            await jsRuntime.InvokeVoidAsync("downloadPdf", userFileName, response.Data);
        }
        catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
        }
    }

    private async Task ShowAddInvoiceModal()
    {
        isAddingNewInvoice = !isAddingNewInvoice;
        if(!isAddingNewInvoice)
            await LoadInvoices();
        StateHasChanged();
    }

    private async Task HandleAddSubmit()
    {
        isAddingNewInvoice = false;
        await LoadInvoices();
    }

    private async Task HandleEditSubmit()
    {
        isEditingInvoice = false;
        invoiceToEdit = null;
        await LoadInvoices();
    }

    private async Task ShowEditInvoiceModal()
    {
        isEditingInvoice = !isEditingInvoice;
        if (!isEditingInvoice)
        {
            invoiceToEdit = null;
            await LoadInvoices();
        }
    }

    private void ShowInvoicePreviewModal()
    {
        isPreviewingInvoice = !isPreviewingInvoice;
        StateHasChanged();
    }
}
