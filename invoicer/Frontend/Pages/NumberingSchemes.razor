@page "/numberingschemes"
@using Frontend.Api;
@using Frontend.Components;
@using Frontend.Services;
@using Microsoft.Extensions.Localization
@using Shared.DTOs
@using Shared.ServiceInterfaces
@inject INumberingSchemeService numberingSchemeService;
@inject ErrorService errorService;
@inject IStringLocalizer<NumberingSchemes> L;

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3">
    @* HEADER *@
    <div class="d-flex justify-content-between align-items-center px-4 pt-4">
        <h3>@L["PageTitle"]</h3>
        <button class="btn btn-primary" @onclick="ShowNewNumberingSchemeModal">
            @L["AddSchemeButton"]
        </button>
    </div>
    <hr />
    @* CONTENT *@
    <div class="d-flex flex-column pb-4">
        @* NUMBERING SCHEMES LIST *@
        <div class="d-flex flex-column overflow-auto px-4 gap-2">
            @if (isLoadingData)
            {
                <Spinner />
            }
            else if (allNumberingSchemes.Count == 0)
            {
                <p>@L["NoSchemesFoundMessage"]</p>
            }
            else
            {
                foreach (NumberingSchemeDto numberingScheme in allNumberingSchemes)
                {
                    int numberingSchemeHash = item.GetHashCode();
                    <NumberingSchemeListItem @key="numberingSchemeHash" NumberingScheme="numberingScheme" OnDeleteNumberingScheme="DeleteScheme" OnEditNumberingScheme="EditScheme" />
                }
            }
        </div>
    </div>
</div>

@* ADD NEW NUMBERING SCHEME MODAL *@
<Modal Title="@L["AddModalTitle"]" IsVisible="isAddingNewNumberingScheme" OnClose="ShowNewNumberingSchemeModal">
    @if (isAddingNewNumberingScheme)
    {
        <NumberingSchemeForm SubmitCallback="HandleAddSubmit" isActive="isAddingNewNumberingScheme" />
    }
</Modal>

@* EDIT NUMBERING SCHEME MODAL *@
<Modal Title="@L["EditModalTitle"]" IsVisible="isEditingNumberingScheme" OnClose="ShowEditNumberingSchemeModal">
    @if (isEditingNumberingScheme && numberingSchemeToEdit is not null)
    {
        <NumberingSchemeForm SubmitCallback="HandleEditSubmit" NumberingSchemeInstance="numberingSchemeToEdit" isActive="isEditingNumberingScheme" />
    }
</Modal>

@code {
    private List<NumberingSchemeDto> allNumberingSchemes = null!;
    private NumberingSchemeDto? numberingSchemeToEdit = null;
    private bool isAddingNewNumberingScheme = false;
    private bool isEditingNumberingScheme = false;
    private bool isLoadingData = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadNumberingSchemes();
    }

    private async Task LoadNumberingSchemes()
    {
        try
        {
            isLoadingData = true;
            allNumberingSchemes = (await numberingSchemeService.GetAllAsync()).ToList();
        }
        catch (Exception e)
        {
            allNumberingSchemes = new();
            errorService.ShowError($"Failed to load numbering schemes. Error message: {e.Message}");
        }
        finally
        {
            isLoadingData = false;
        }
    }

    private async Task DeleteScheme(NumberingSchemeDto schemeToDelete)
    {
        try
        {
            bool status = await numberingSchemeService.DeleteAsync(schemeToDelete.Id);
            if (status)
            {
                await LoadNumberingSchemes();
            }
        }
        catch (Exception e)
        {
            errorService.ShowError(e.Message);
        }
    }

    private async Task EditScheme(NumberingSchemeDto schemeToEdit)
    {
        numberingSchemeToEdit = schemeToEdit;
        await ShowEditNumberingSchemeModal();
    }

    private async Task ShowNewNumberingSchemeModal()
    {
        isAddingNewNumberingScheme = !isAddingNewNumberingScheme;
        if (!isAddingNewNumberingScheme)
            await LoadNumberingSchemes();
    }

    private async Task ShowEditNumberingSchemeModal()
    {
        isEditingNumberingScheme = !isEditingNumberingScheme;
        if (!isEditingNumberingScheme)
            await LoadNumberingSchemes();
    }

    private async Task HandleAddSubmit()
    {
        isAddingNewNumberingScheme = false;
        await LoadNumberingSchemes();
    }

    private async Task HandleEditSubmit()
    {
        isEditingNumberingScheme = false;
        numberingSchemeToEdit = null;
        await LoadNumberingSchemes();
    }
}
