@page "/entities";
@using Application.ServiceInterfaces;
@using Application.DTOs;
@using Frontend.Components;
@using Frontend.Services;
@using Microsoft.Extensions.Localization;
@inject IEntityService entityService;
@inject ErrorService errorService;
@inject IStringLocalizer<Entities> L;

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3" style="height:90vh;">
    @* HEADER *@
    <div class="d-flex flex-row justify-content-between align-content-center px-4 pt-4">
        <h3>@L["PageTitle"]</h3>
        <button class="btn btn-primary" @onclick="ShowNewEntityModal">
            @L["AddNewEntityButton"]
        </button>
    </div>
    <hr/>
    @* CONTENT *@
    <div class="d-flex flex-row px-4 pb-4" style="height: calc(100% - 120px);">
        @if (allEntities is null)
        {
            <p>@L["LoadingMessage"]</p>
        }
        else if (allEntities.Count == 0)
        {
            <p>@L["NoEntitiesFoundMessage"]</p>
        }
        else
        {
            @* ENTITIES LIST*@
            <div class="d-flex flex-column gap-2" style="overflow-y:auto;">
                @foreach (var entity in allEntities)
                {
                    <EntityListItem Entity="entity" OnSelectEntity="SelectEntity" OnDeleteEntity="DeleteEntity" OnEditEntity="EditEntity" IsSelected="IsEntitySelected(entity)" />
                }
            </div>
        }
        @* DETAILS OF THE SELECTED ENTITY *@
        <div class="d-flex flex-column border border-black rounded ms-2 flex-grow-1">
            @if (selectedEntity is null)
            {
                <p class="px-4 pt-4 text-black">@L["SelectEntityPrompt"]</p>
            }
            else
            {
                <EntityDetailView SelectedEntity="selectedEntity" />
            }
        </div>
    </div>
</div>

@* ADD NEW ENTITY MODAL *@
<Modal Title="@L["AddModalTitle"]" IsVisible="isAddingNewEntity" OnClose="ShowNewEntityModal">
    @if (isAddingNewEntity)
    {
        <EntityForm SubmitCallback="HandleAddSubmit" isActive="isAddingNewEntity" />
    }
</Modal>
@* EDIT ENTITY MODAL *@
<Modal Title="@L["EditModalTitle"]" IsVisible="isEditingEntity" OnClose="ShowEditEntityModal">
    @if (isEditingEntity && entityToEdit is not null)
    {
        <EntityForm SubmitCallback="HandleEditSubmit" EntityInstance="entityToEdit" isActive="isEditingEntity" />
    }
</Modal>

@code {
    private IList<EntityDto> allEntities = new List<EntityDto>();
    private EntityDto? selectedEntity = null;
    private EntityDto? entityToEdit = null;
    private bool isAddingNewEntity = false;
    private bool isEditingEntity = false;

    protected override async Task OnInitializedAsync() {
        await LoadEntities();
    }

    private bool IsEntitySelected(EntityDto entity)
    {
        return selectedEntity != null && selectedEntity.Id == entity.Id;
    }

    private async Task LoadEntities() {
        try
        {
            allEntities = (await entityService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorService.ShowError($"Failed to load entities: {ex.Message}");
        }
    }

    private void SelectEntity(EntityDto newSelectedEntity)
    {
        if (newSelectedEntity == selectedEntity)
        {
            selectedEntity = null;
            return;
        }
        selectedEntity = newSelectedEntity;
    }

    private async Task DeleteEntity(EntityDto entityToDelete)
    {
        try
        {
            var status = await entityService.DeleteAsync(entityToDelete.Id);
            if (status) {
                selectedEntity = null;
                await LoadEntities();
            }
        } catch (Exception ex)
        {
            errorService.ShowError(ex.Message);
        }
    }

    private async Task EditEntity(EntityDto entityToEdit)
    {
        this.entityToEdit = entityToEdit;
        await ShowEditEntityModal();
    }

    private async Task ShowNewEntityModal()
    {
        isAddingNewEntity = !isAddingNewEntity;
        if (!isAddingNewEntity)
            await LoadEntities();
    }

    private async Task ShowEditEntityModal() {
        isEditingEntity = !isEditingEntity;
        if (!isEditingEntity)
        {
            entityToEdit = null;
            await LoadEntities();
        }
    }

    private async Task HandleAddSubmit()
    {
        isEditingEntity = false;
        await LoadEntities();
    }

    private async Task HandleEditSubmit()
    {
        isAddingNewEntity = false;
        entityToEdit = null;
        await LoadEntities();
    }
}