@page "/entities";
@using Domain.Models
@using Domain.ServiceInterfaces
@using Frontend.Components;
@inject IEntityService entityService;

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3">
    @* HEADER *@
    <div class="d-flex flex-row justify-content-between align-content-center px-4 pt-4">
        <h3>Economic Entites</h3>
        <button class="btn btn-primary" @onclick="() => ShowNewEntityModal()">
            Add New Entity
        </button>
    </div>
    <hr/>
    @* CONTENT *@
    <div class="d-flex flex-row px-4 pb-4 gap-4">
        @if (allEntities is null) 
        {
            <p>Loading...</p>
        } 
        else if (allEntities.Count == 0) 
        {
            <p>Not entities found</p>
        } 
        else 
        {
            @* ENTITIES LIST *@
            <div class="d-flex flex-column pe-2 overflow-auto" style="max-height: 600px">
                @foreach (var entity in allEntities)
                {
                    <EntityListItem Entity="entity" OnSelectEntity="SelectEntity" OnDeleteEntity="DeleteEntity" OnEditEntity="EditEntity" IsSelected="IsEntitySelected(entity)" />
                }
            </div>
        }
        @* DETAILS OF THE SELECTED ENTITY *@
        <div class="d-flex flex-column border border-black flex-grow-1 rounded">
            @if (selectedEntity is null) 
            {
                <p class="px-4 pt-4 text-black"> Select an entity... </p>
            } 
            else 
            {
                <EntityDetailView SelectedEntity="selectedEntity" />
            }
        </div>
    </div>
</div>
@* ADD NEW ENTITY MODAL *@
<Modal Title="Add New Entity" IsVisible="isAddingNewEntity" OnClose="() => ShowNewEntityModal()">
    <NewEntityForm SubmitCallback="ShowNewEntityModal"/>
</Modal>


@code {
    private IList<Entity> allEntities = new List<Entity>();
    private Entity? selectedEntity = null;
    private bool isAddingNewEntity = false;

    protected override async Task OnInitializedAsync() {
        await LoadEntities();
    }

    private bool IsEntitySelected(Entity entity) {
        return selectedEntity != null && selectedEntity.Id == entity.Id;
    }

    private async Task LoadEntities() {
        try 
        {
            allEntities = (await entityService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SelectEntity(Entity newSelectedEntity)
    {
        if (newSelectedEntity == selectedEntity)
        {
            selectedEntity = null;
            return;
        }
        selectedEntity = newSelectedEntity;
    }

    private async void DeleteEntity(Entity entityToDelete)
    {
        var status = await entityService.DeleteAsync(entityToDelete.Id);
        if (status) {
            allEntities.Remove(entityToDelete);
            selectedEntity = null;
            StateHasChanged();
            Console.WriteLine($"Entity with id {entityToDelete.Id} was deleted");
        }
    }

    private void EditEntity(Entity entityToEdit)
    {
        Console.WriteLine($"Editing entity with id {entityToEdit.Id}");
    }

    private async Task ShowNewEntityModal()
    {
        isAddingNewEntity = !isAddingNewEntity;
        await LoadEntities();
        StateHasChanged();
    }
}
