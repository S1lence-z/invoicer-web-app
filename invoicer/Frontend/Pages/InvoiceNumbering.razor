@page "/invoicenumbering"
@using Frontend.Api
@using Frontend.Services
@using Frontend.Components
@using Microsoft.Extensions.Localization
@using Shared.DTOs
@using Shared.Extensions
@using Application.ServiceInterfaces
@inject ErrorService errorService
@inject IEntityService entityService
@inject INumberingSchemeService numberingService
@inject IStringLocalizer<InvoiceNumbering> L

@* PAGE CONTAINER *@
<div class="d-flex flex-column border rounded-3">
    @* HEADER *@
    <div class="d-flex justify-content-between align-items-center px-4 pt-4 pb-2">
        <h3>@L["PageTitle"]</h3>
    </div>
    @* CONTENT *@
    <div class="d-flex flex-column pb-4">
        @* NUMBERING SCHEMES LIST *@
        <div class="d-flex flex-column overflow-auto px-4 gap-2">
            @if (isLoadingData)
            {
                <Spinner />
            }
            else if (allEntities is null || allNumberingSchemes is null)
            {
                <p>@L["LoadingMessage"]</p>
            }
            else if (allEntities.Count == 0 || allNumberingSchemes.Count == 0)
            {
                @if (allEntities.Count == 0)
                {
                    <p>@L["NoEntitiesFound"]</p>
                }
                @if (allNumberingSchemes.Count == 0)
                {
                    <p>@L["NoNumberingSchemesFound"]</p>
                }
            }
            else
            {
                foreach (EntityDto entity in allEntities)
                {
                    <div class="card border-2 shadow-sm">
                        <div class="card-body d-flex flex-row justify-content-between align-items-center gap-3">
                            <div class="fw-bold text-dark">@entity.Name</div>
                            <div class="text-end">
                                <select class="form-select" @onchange="(e) => OnNumberingSchemeChange(entity, int.Parse(e.Value!.ToString()!))">
                                    @if (!allNumberingSchemes.Any())
                                    {
                                        <option value="">@L["NoNumberingSchemesFound"]</option>
                                    }
                                    else
                                    {
                                        @foreach (NumberingSchemeDto numberingScheme in allNumberingSchemes)
                                        {
                                            <option value="@numberingScheme.Id" selected="@(entity.CurrentNumberingSchemeId == numberingScheme.Id)">
                                                @numberingScheme.GetPreview(1)
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private IList<EntityDto> allEntities = new List<EntityDto>();
    private IList<NumberingSchemeDto> allNumberingSchemes = new List<NumberingSchemeDto>();
    private bool isLoadingData = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoadingData = true;
            await LoadEntities();
            await LoadNumberingSchemes();
        }
       catch (Exception e)
       {
           errorService.ShowError($"Failed to fetch necessary data. Error message: {e.Message}");
       }
       finally
       {
           isLoadingData = false;
       }
   }

   private async Task LoadEntities()
   {
       try
       {
           allEntities = (await entityService.GetAllAsync()).ToList();
       }
       catch (Exception)
       {
           allEntities = new List<EntityDto>();
           throw;
       }
   }

   private async Task LoadNumberingSchemes()
   {
       try
       {
           allNumberingSchemes = (await numberingService.GetAllAsync()).ToList();
       }
       catch (Exception)
       {
           allNumberingSchemes = new List<NumberingSchemeDto>();
           throw;
       }
   }

   private async Task OnNumberingSchemeChange(EntityDto entity, int updatedNumberingSchemeId)
   {
       int previousNumberingSchemeId = entity.CurrentNumberingSchemeId;
       EntityDto updatedEntity = entity with { CurrentNumberingSchemeId = updatedNumberingSchemeId };
       bool updateStatus = await UpdateEntityNumberingScheme(updatedEntity.Id, updatedEntity);
       if (updateStatus)
       {
           entity.CurrentNumberingSchemeId = updatedEntity.CurrentNumberingSchemeId;
           StateHasChanged();
       }
       else
           errorService.ShowError(L["UpdateFailed"]);

   }

   private async Task<bool> UpdateEntityNumberingScheme(int entityId, EntityDto updatedEntity)
   {
       try
       {
           await entityService.UpdateAsync(entityId, updatedEntity);
           return true;
       }
       catch (Exception e)
       {
           errorService.ShowError(e.Message);
           return false;
       }
   }
}